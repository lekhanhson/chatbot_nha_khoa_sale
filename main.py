# icare_bot/main.py

import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CommandHandler, filters
from openai import AsyncOpenAI

# C·∫•u h√¨nh log
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Load API Keys
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# Kh·ªüi t·∫°o OpenAI Client m·ªõi
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# Prompt c·ªë ƒë·ªãnh
ICARE_PROMPT = """
B·∫°n ƒë√≥ng vai l√† Chuy√™n gia ƒë√†o t·∫°o t∆∞ v·∫•n b√°n h√†ng trong lƒ©nh v·ª±c Nha khoa cao c·∫•p.
Khi t√¥i nh·∫≠p v√†o m·ªôt c√¢u t·ª´ ch·ªëi kh√°ch h√†ng, h√£y:

1. Ph√¢n t√≠ch theo m√¥ h√¨nh I-CARE:
    - (i) Identify: L·ªùi t·ª´ ch·ªëi b·ªÅ n·ªïi.
    - (c) Clarify: Ph√¢n t√≠ch th√¥ng ƒëi·ªáp ·∫©n.
    - (a) Ask: G·ª£i m·ªü 1-2 c√¢u h·ªèi m·ªü.
    - (r) Respond: C√°ch x·ª≠ l√Ω tinh t·∫ø.
    - (e) Empower: Kh∆°i g·ª£i kh√°ch h√†ng t·ª± ƒë·ªÅ xu·∫•t.

2. Vi·∫øt ƒëo·∫°n h·ªôi tho·∫°i tham kh·∫£o, ƒë√°nh d·∫•u (i/c/a/r/e).
S·ª≠ d·ª•ng phong c√°ch giao ti·∫øp d·ªãu d√†ng, th·∫•u c·∫£m, c·∫ßu th·ªã, kh√¥ng √©p bu·ªôc.
Gi·ªØ gi·ªçng vƒÉn m·ªÅm m·∫°i, t·ª± nhi√™n, g·∫ßn g≈©i, x∆∞ng h√¥ th√¢n thi·ªán.
Tr√°nh qu√° kh√°ch s√°o. Th·ªÉ hi·ªán s·ª± ch√¢n th√†nh, ƒë·ªìng h√†nh c√πng kh√°ch.
Lu√¥n khi·∫øn kh√°ch c·∫£m nh·∫≠n r·∫±ng b·∫°n ƒë·ª©ng v·ªÅ ph√≠a h·ªç:
V√≠ d·ª•: "N·∫øu em ·ªü v·ªã tr√≠ c·ªßa anh/ch·ªã, ch·∫Øc em c≈©ng s·∫Ω c√≥ c√πng bƒÉn khoƒÉn nh∆∞ v·∫≠y ƒë√≥ ·∫°. Nh∆∞ng sau khi em h·ªèi l·∫°i nh·ªØng anh/ch·ªã kh√°ch h√†ng ƒë√£ tr·∫£i nghi·ªám, em m·ªõi hi·ªÉu l√Ω do th·ª±c s·ª± v√¨ sao h·ªç v·∫´n ch·ªçn b√™n em."
Phong c√°ch n√≥i chuy·ªán t·ª± nhi√™n, ƒë·ªùi th∆∞·ªùng, nh∆∞ ƒëang tr√≤ chuy·ªán nh·∫π nh√†ng t·∫°i ph√≤ng kh√°m uy t√≠n.
"""

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text

    response = await client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": ICARE_PROMPT},
            {"role": "user", "content": user_text}
        ],
        temperature=0.3,
        max_tokens=1000
    )

    reply = response.choices[0].message.content
    await update.message.reply_text(reply)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi AI Sale  üåü\n[H·ªçc Vi·ªán Nha Khoa Irene]\n\n"
        "H√£y nh·∫≠p v√†o l·ªùi t·ª´ ch·ªëi c·ªßa kh√°ch h√†ng, t√¥i s·∫Ω gi√∫p b·∫°n."
    )

def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))

    app.run_polling()

if __name__ == "__main__":
    main()
